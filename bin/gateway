#!/usr/bin/env node
var nconf = require('../config/nconf.js');
process.env.DATABASE_URL = nconf.get('DATABASE_URL');
var trust = require('../lib/trust.js');
var getTrustLines = require('../lib/lines.js');
var _ = require('underscore-node');

var program = require('commander');
var RippleWallet = require('ripple-wallet').Ripple.Wallet;
var crypto = require('crypto');
var spawn = require('child_process').spawn;
var fs = require('fs');
var adapter = new require(nconf.get('RIPPLE_DATAMODEL_ADAPTER'));
var ripple = require('../lib/remote');
var Amount = require('ripple-lib').Amount;
var api = require("ripple-gateway-data-sequelize-adapter");
var abstract = require("../lib/abstract.js");
var Table = require("cli-table");
var gateway = require('../lib/gateway');

program
  .version('0.0.1')
  .option('-i, --issuer', 'specify an issuer other than the cold wallet')
  .option('-e, --env', 'specify the environment');

function printPaymentsTable(payments) {
  var table = new Table({
    head: ['#', 'Address Id', 'Amount', 'Currency'],
    colWidths: [8, 8, 10, 10]
  });
  for (var i=0; i<payments.length; i++){
    var payment = payments[i];
    table.push([ 
      payment.id, 
      payment.to_address_id, 
      payment.to_amount, 
      payment.to_currency, 
    ]);
  }
  console.log(table.toString());
}

function printExternalTransactionsTable(transactions) {
  var table = new Table({
    head: ['#', 'Created', 'Amount', 'Currency', 'Account Id'],
    colWidths: [10, 30, 10, 10, 15]
  });
  for (var i=0; i<transactions.length; i++){
    var transaction = transactions[i];
    table.push([ 
      transaction.id, 
      transaction.createdAt, 
      transaction.amount, 
      transaction.currency, 
      transaction.external_account_id
    ]);
  }
  console.log(table.toString());
}


program
  .command('list_incoming_payments')
  .description('list unprocesses incoming ripple payments')
  .action(function(){
    gateway.payments.listIncoming(function(err, payments){
      printPaymentsTable(payments);
    }); 
  });

program
  .command('list_withdrawals')
  .description('get pending withdrawals to external accounts')
  .action(function(account, secret){
    api.externalTransactions.readAllPending(function(err, withdrawals) {
      printExternalTransactionsTable(withdrawals);
    });
  });

program
  .command('clear_withdrawal <external_transaction_id>')
  .description('clear pending withdrawal to external account')
  .action(function(id){
    abstract.clearWithdrawal(id, function(err, withdrawal) {
      if (err) { console.log('failed'); return }
      console.log('success');
    }); 
  });

function sendCurrency(opts, fn) {
  var amount = opts.amount;
  var currency = opts.currency;
  var issuer = opts.issuer
  var to_account = opts.to_account;
  var from_account = opts.from_account;
  var secret = opts.secret;

  var human = amount+currency;

  ripple.set_secret(from_account, secret);

  ripple.connect(function(){
    var amount = Amount.from_human(human);
    amount.set_issuer(issuer);

    var transaction = ripple.transaction();

    transaction.payment({
      from: from_account, 
      to: to_account,
      amount: amount
    });

    transaction.submit();
    transaction.on('success', function(tx){
      fn(null, tx);
      ripple.disconnect();
    })
    transaction.on('error', function(err) {
      fn(err, null);
      ripple.disconnect();
    });
  });
}

function issueCurrency(amount, currency, secret, fn) {
  var opts = {
    to_account: nconf.get('gateway_hot_wallet').address,
    from_account: nconf.get('gateway_cold_wallet'),
    amount: amount,
    currency: currency,
    issuer: nconf.get('gateway_cold_wallet'),
    secret: secret
  }

  sendCurrency(opts, fn);
}

program
  .command('fund_hot_wallet <amount> <currency>')
  .description('issue funds from cold wallet to hot wallet') 
  .action(function(amount, currency){
    program.password('Cold Wallet Secret: ', function(secret){
      process.stdin.destroy();
      issueCurrency(amount, currency, secret, function(err, resp){
        if (err || (resp.engine_result != 'tesSUCCESS')) {
          console.log('error', err.engine_result);
          get_and_print_trust_lines();
        } else {
          get_and_print_trust_lines();
        }
      });
    });
  });


function setCurrency(currency, amount) {
  var currency = currency.toUpperCase();
  lookupRippleBalance(currency, function(err, balance) {
    if (err) { fn(err, null); return; };
    var currentAmount = balance.balance.toFloat();
    var targetAmount = amount.toFloat();
    if (currentAmount == targetAmount) { 
      console.log('do nothing, trust is the same');
    };
    if (currentAmount > targetAmount) { 
      console.log('decrease trust to '+targetAmount);
    };
    if (currentAmount < targetAmount) { 
      console.log('increase trust to '+targetAmount);
    };
  });
}

function lookupRippleBalance(currency, fn){
  lookupRippleBalances(nconf.get('gateway_hot_wallet').address,
    nconf.get('gateway_cold_wallet'),
    function(err, balances) {
      if (err) { fn(err, null); return; };
      fn(null, balances[currency.toUpperCase()]);
    }
  );
};

function lookupRippleBalances(hotWalletAddress, coldWalletAddress, fn) {
  ripple.connect(function(){
    ripple.request_account_lines(hotWalletAddress, function(err, resp) { 
      if (err) { fn(err, null); return; };
      var lines = {};
      for (var i=0; i < resp.lines.length; i++){
        if (resp.lines[i].account == coldWalletAddress) {
          lines[resp.lines[i].currency] = {
            balance: resp.lines[i].balance,
            limit: resp.lines[i].limit
          };
        }
      };
      fn(null, lines);
    });
  });
}

program
  .command('record_deposit <amount> <currency> <external_account_id>')
  .description('record a deposit in the deposit processing queue')
  .action(function(amount, currency, external_account_id) {
    gateway.deposits.record({
      currency: currency,
      amount: amount,
      external_account_id: external_account_id
    }, function(err, deposit) {
      console.log(err, deposit); 
    });
  });

program
  .command('list_deposits')
  .description('list deposits in the deposit processing queue')
  .action(function() {
    gateway.deposits.listQueued(function(err, deposits) {
      printExternalTransactionsTable(deposits);
    });
  });

program
  .command('list_outgoing_payments')
  .description('list the outgoing ripple payments.')
  .action(function(){
    gateway.payments.listOutgoing(function(err, transactions) {
      printPaymentsTable(transactions);
    });
  });

program
  .command('list_users')
  .description('list registered users')
  .action(function(){
    api.users.readAll(function(err, users){
      if (err) {
        console.log('error:', err);
        return;
      }
      formatted = { users: [] };
      for (var i=0;i<users.length;i++) {
        formatted.users.push(users[i].name);
        console.log(users[i].name);
      } 
    });
  });

program
  .command('register_user <username> <password> <ripple_address>')
  .description('create a user with a ripple address')
  .action(function(username, password, ripple_address){
    var userParams = { 
      name: username,
      password: password,
      ripple_address: ripple_address
    };
    abstract.registerUser(userParams, function(err, user) {
      console.log(err, user);  
    });
  });

program.parse(process.argv);

