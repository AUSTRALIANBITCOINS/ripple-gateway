#!/usr/bin/env node
var nconf = require('../config/nconf.js');
process.env.DATABASE_URL = nconf.get('DATABASE_URL');

var program = require('commander');
var RippleWallet = require('ripple-wallet').Ripple.Wallet;
var crypto = require('crypto');
var spawn = require('child_process').spawn;
var fs = require('fs');
var adapter = new require(nconf.get('RIPPLE_DATAMODEL_ADAPTER'));
var ripple = require('../lib/remote');
var Amount = require('ripple-lib').Amount;
var api = require("ripple-gateway-data-sequelize-adapter");
var abstract = require("../lib/abstract.js");

program
  .version('0.0.1')
  .option('-i, --issuer', 'specify an issuer other than the cold wallet')
  .option('-e, --env', 'specify the environment');

program
  .command('set_postgres_url <url>')
  .description('set the url of the postgres database')
  .action(function(url){
    nconf.set('DATABASE_URL', url);
    nconf.save(function (err) {
      console.log('set DATABASE_URL to:');
      console.log(nconf.get('DATABASE_URL'));
    });
  });

program
  .command('get_postgres_url')
  .description('get the url of the postgres database')
  .action(function(cmd){
    console.log(nconf.get('DATABASE_URL'));
  });

program
  .command('set_ripple_rest_url <url>')
  .description('set the url of the ripple rest api')
  .action(function(url){
    nconf.set('RIPPLE_REST_API', url);
    nconf.save(function(err) {
      console.log('set the ripple rest api url');
      console.log(nconf.get('RIPPLE_REST_API'));
    });
  });

program
  .command('get_ripple_rest_url')
  .description('get the url of the ripple rest api')
  .action(function(cmd){
    console.log(nconf.get('RIPPLE_REST_API'));
  });

program
  .command('set_hot_wallet <address> <secret>')
  .description('set the gateway hot wallet')
  .action(function(address, secret){
    var key = 'gateway_hot_wallet';
    var key = 'gateway_hot_wallet';
    nconf.set(key, {
      address: address,
      secret: secret
    });
    nconf.save(function(){
      hot_wallet = nconf.get(key);
      console.log('set the hot wallet:', hot_wallet);
    });
  });

program
  .command('get_hot_wallet')
  .description('get the gateway hot wallet')
  .action(function(){
    var key = 'gateway_hot_wallet';
    var hot_wallet = nconf.get(key);
    if (hot_wallet) {
      console.log(hot_wallet);
    } else {
      console.log('hot wallet not yet set');
      console.log('use npm gateway wallet:set:hot <address> <secret>');
    }
  });

program
  .command('set_cold_wallet <account>')
  .description('set the gateway hot wallet')
  .action(function(account){
    var key = 'gateway_cold_wallet';
    var cold_wallet = nconf.get(key);
    if (cold_wallet) {
      console.log('cold wallet address already set:', cold_wallet);
    } else {
      nconf.set(key, account);
      nconf.save(function(){
        cold_wallet = nconf.get(key);
        console.log('set the cold wallet:', cold_wallet);
      });
    }
  });

program
  .command('get_cold_wallet')
  .description('get the gateway cold wallet')
  .action(function(){
    var key = 'gateway_cold_wallet';
    var cold_wallet = nconf.get(key);
    if (cold_wallet) {
      console.log(cold_wallet);
    } else {
      console.log('cold wallet not yet set');
      console.log('use npm gateway wallet:set:cold <address>');
    }
  });

program
  .command('generate_wallet')
  .description('generate a random ripple wallet')
  .action(function(account, secret){
    console.log(RippleWallet.generate());
  });

program
  .command('set_key')
  .description('set the admin api key')
  .action(function(account, secret){
    var password = crypto.randomBytes(32).toString('hex');
    nconf.set('KEY', password);
    nconf.save(function(err){
      console.log(nconf.get('KEY'));
    });
  });


program
  .command('get_key')
  .description('get the admin api key')
  .action(function(account, secret){
		getAdminKey(function(err, key){
      if (err) {
        console.log({ error: err });
      } else {
        console.log(key);
      }
		});
  });

program
  .command('generate_key')
  .description('get the admin password')
  .action(function(account, secret){
    var password = crypto.randomBytes(32).toString('hex');
    console.log(password);
  });

program
  .command('list_withdrawals')
  .description('get pending withdrawals to external accounts')
  .action(function(account, secret){
    console.log('get pending withdrawals');
  });

program
  .command('clear_withdrawals <external_transaction_id>')
  .description('clear pending withdrawal to external account')
  .action(function(account, secret){
    console.log('clear a pending withdrawal');
  });

function setCurrencyInNconf(currency, amount) {
    key = 'gateway_currencies';
    currency = currency.toUpperCase();
    var currencies = nconf.get(key);
    if (!currencies) {
      currencies = {};
    }
    if (!currencies[currency]) {
      currencies[currency] = amount;  
    }
    nconf.set(key, currencies);
    nconf.save(function(){
      console.log(nconf.get(key));
    });

}

function issueCurrency(amount, currency, secret, fn) {
  var human = amount+currency.toUpperCase();
  var hotWallet = nconf.get('gateway_hot_wallet');
  var coldWallet = nconf.get('gateway_cold_wallet');
  ripple.set_secret(coldWallet, secret);

  ripple.connect(function(){
    var amount = Amount.from_human(human);
    amount.set_issuer(coldWallet);

    var transaction = ripple.transaction();
    console.log(hotWallet);

    transaction.payment({
      from: coldWallet, 
      to: hotWallet.address,
      amount: amount
    });

    transaction.submit(fn);
  });
}

program
  .command('fund_hot_wallet <amount> <currency> <secret>')
  .description('issue funds from cold wallet to hot wallet') 
  .action(function(amount, currency, secret){
    issueCurrency(amount, currency, secret, function(err, resp){
      if (err || (resp.engine_result != 'tesSUCCESS')) {
        console.log('error', err);
      } else {
        console.log('success!');
      }
    });
  });

function setTrustLine(currency, amount, fn) {
  var hotWallet = nconf.get('gateway_hot_wallet');
  ripple.connect(function(){
    var amount = Amount.from_human('1CAD');
    ripple.set_secret(hotWallet.address, hotWallet.secret);

    var transaction = ripple.transaction();

    transaction.trustSet({
      from: hotWallet.address, 
      to: nconf.get('gateway_cold_wallet'), 
      amount: '1/CAD'+nconf.get('gateway_cold_wallet')
    });

    transaction.submit(fn);
  });
}

program
  .command('set_trust <currency> <amount>')
  .description('set level of trust from hot to cold wallet') 
  .action(function(currency, amount){
    setTrustLine(currency, amount, function(err, resp){
      console.log(err, resp);
    });
  });

function setCurrency(currency, amount) {
  var currency = currency.toUpperCase();
  lookupRippleBalance(currency, function(err, balance) {
    if (err) { fn(err, null); return; };
    var currentAmount = balance.balance.toFloat();
    var targetAmount = amount.toFloat();
    if (currentAmount == targetAmount) { 
      console.log('do nothing, trust is the same');
    };
    if (currentAmount > targetAmount) { 
      console.log('decrease trust to '+targetAmount);
    };
    if (currentAmount < targetAmount) { 
      console.log('increase trust to '+targetAmount);
    };
  });
}

function lookupRippleBalance(currency, fn){
  lookupRippleBalances(nconf.get('gateway_hot_wallet').address,
    nconf.get('gateway_cold_wallet'),
    function(err, balances) {
      if (err) { fn(err, null); return; };
      fn(null, balances[currency.toUpperCase()]);
    }
  );
};

/*
lookupRippleBalance('btc', function(err, balance) {
  console.log(err, balance);
});
*/

function lookupRippleBalances(hotWalletAddress, coldWalletAddress, fn) {
  ripple.connect(function(){
    ripple.request_account_lines(hotWalletAddress, function(err, resp) { 
      if (err) { fn(err, null); return; };
      var lines = {};
      for (var i=0; i < resp.lines.length; i++){
        if (resp.lines[i].account == coldWalletAddress) {
          lines[resp.lines[i].currency] = {
            balance: resp.lines[i].balance,
            limit: resp.lines[i].limit
          };
        }
      };
      fn(null, lines);
    });
  });
}

function verifyColdAndHotWallets() {
  var hotWallet = nconf.get('gateway_hot_wallet');
  var coldWallet = nconf.get('gateway_cold_wallet');
  return hotWallet && coldWallet;
}

function get() {
  return nconf.get();
}

program
  .command('list_currencies')
  .description('add support for a currency') 
  .action(function(currency){
    var currencies = nconf.get('currencies') || {};
    for (c in currencies) {
      console.log(c);
    }
  });

program
  .command('add_currencies <currency>')
  .description('add support for a currency') 
  .action(function(currency){
    var currencies = nconf.get('currencies') || {};
    if (!(currency in currencies)) {
      currencies[currency] = 0;
    }
    nconf.set('currencies', currencies);
    nconf.save(function(){
      for (c in currencies) {
        console.log(c);
      }
    });
  });

program
  .command('remove_currencies <currency>')
  .description('remove support for a currency')
  .action(function(currency){
    var currencies = nconf.get('currencies') || {};
    delete currencies[currency];
    nconf.set('currencies', currencies);
    nconf.save(function(){
      for (c in currencies) {
        console.log(c);
      }
    });
  });

program
  .command('deposit <username> <amount> <currency>')
  .description('process a deposit by sending to ripple address')
  .action(function(username, amount, currency) {
    abstract.deposit(username, amount, currency, function(err, deposit) {
      console.log(err, deposit); 
    });
  });

program
  .command('list_users')
  .description('list registered users')
  .action(function(){
    api.users.readAll(function(err, users){
      if (err) {
        console.log('error:', err);
        return;
      }
      formatted = { users: [] };
      for (var i=0;i<users.length;i++) {
        formatted.users.push(users[i].name);
        console.log(users[i].name);
      } 
    });
  });

program
  .command('register_user <username> <password> <ripple_address>')
  .description('create a user with a ripple address')
  .action(function(username, password, ripple_address){
    var userParams = { 
      name: username,
      password: password,
      ripple_address: ripple_address
    };
    abstract.registerUser(userParams, function(err, user) {
      console.log(err, user);  
    });
  });

program
  .command('set_last_payment_hash <hash>')
  .description('set the last encountered payment hash for incoming processing.')
  .action(function(hash) {
    nconf.set('last_payment_hash', hash);
    nconf.save(function(){
      console.log('set the last payment hash to', hash);
    });
  });

program
  .command('get_last_payment_hash')
  .description('get the last encountered payment hash for incoming processing.')
  .action(function() {
    console.log(nconf.get('last_payment_hash'));
  });

program
  .command('restart')
  .description('restart the gateway api server after update')
  .action(function(account, secret){
    console.log('restart the gateway api server');
  });

program.parse(process.argv);

